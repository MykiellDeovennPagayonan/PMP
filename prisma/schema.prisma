generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid()) @map("_id")
  name            String
  email           String           @unique
  password        String?
  user_type       user_type
  serviceRequests ServiceRequest[]
  department      String?
  accounts        Account[]
  sessions        Session[]
}

model Session {
  id           String   @id @default(uuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                String   @id @default(uuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model ServiceRequest {
  id                   String                 @id @default(uuid()) @map("_id")
  userId               String
  title                String
  details              String
  implementationPlan   ImplementationPlan?
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  ServiceRequestRating ServiceRequestRating?
  status               ServiceRequestStatus[]
}

model ServiceRequestStatus {
  id               String         @id @default(uuid()) @map("_id")
  serviceRequestId String
  status           String
  timestamp        DateTime
  note             String?
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
}

model ServiceRequestRating {
  id             String         @id @default(uuid()) @map("_id")
  ratings        Rating[]
  serviceRequest ServiceRequest @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Rating {
  id                     String               @id @default(uuid()) @map("_id")
  serviceRequestRatingId String
  description            String
  rating                 Int
  serviceRequestRating   ServiceRequestRating @relation(fields: [serviceRequestRatingId], references: [id], onDelete: Cascade)
}

model ImplementationPlan {
  id                   String                @id @default(uuid()) @map("_id")
  description          String
  status               String
  files                Files[]
  serviceRequest       ServiceRequest        @relation(fields: [id], references: [id], onDelete: Cascade)
  personnelAssignments PersonnelAssignment[]
  tasks                Task[]
}

model Task {
  id                   String             @id @default(uuid()) @map("_id")
  implementationPlanId String
  name                 String
  deadline             DateTime
  checked              Boolean
  implementationPlan   ImplementationPlan @relation(fields: [implementationPlanId], references: [id], onDelete: Cascade)
}

model Files {
  id                   String             @id @default(uuid()) @map("_id")
  implementationPlanId String
  url                  String
  implementationPlan   ImplementationPlan @relation(fields: [implementationPlanId], references: [id], onDelete: Cascade)
}

model Personnel {
  id                   String                @id @default(uuid()) @map("_id")
  name                 String
  department           String
  personnelAssignments PersonnelAssignment[]
}

model PersonnelAssignment {
  id                   String             @id @default(uuid()) @map("_id")
  personnelId          String
  implementationPlanId String
  implementationPlan   ImplementationPlan @relation(fields: [implementationPlanId], references: [id], onDelete: Cascade)
  personnel            Personnel          @relation(fields: [personnelId], references: [id], onDelete: Cascade)
}

enum user_type {
  ADMIN
  USER
  SUPERVISOR
}
